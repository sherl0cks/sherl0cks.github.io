<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://sherl0cks.github.io/</title>
   
   <link>http://sherl0cks.github.io/</link>
   <description>My thoughts on people, process and technology.</description>
   <language>en-uk</language>
   <managingEditor> Justin Holmes</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>KIE Server Authentication & Authorization For Human Tasks</title>
	  <link>//using-kie-server-to-get-a-task-list</link>
	  <author>Justin Holmes</author>
	  <pubDate>2016-04-18T07:16:00-04:00</pubDate>
	  <guid>//using-kie-server-to-get-a-task-list</guid>
	  <description><![CDATA[
	     <p>One of the most exciting features developed in the <a href="http://www.kiegroup.org/">KIE Community</a> and released in <a href="https://access.redhat.com/documentation/en-US/Red_Hat_JBoss_BPM_Suite/6.2/html/6.2.0_Release_Notes/ch01s02.html">Red Hat BxMS 6.2+</a> is the unified KIE Server. If you are new to this subject, you should probably start with a great series of blogs from <a href="http://mswiderski.blogspot.com/2015/09/unified-kie-execution-server-part-1.html">Maciej Swiderski on the KIE Server</a>. One of the primary reasons that companies deploy KIE Server is to develop custom UI&#39;s for their end users, while still leveraging the powerful jBPM engine for process management and execution. In jBPM 6.4 and Red Hat BPM Suite 6.3, we even released <a href="http://mswiderski.blogspot.com/2016/03/jbpm-ui-extension-on-kie-server.html">a REST API specifically designed for custom HTML/JS UI&#39;s</a> as well as support for <a href="http://mswiderski.blogspot.com/2016/01/advanced-queries-in-kie-server.html">custom queries on your process and task data</a> to support sophisticated task dashboards.</p>

<p>To use these features, you&#39;ll need to dig into the underlying model for authentication and authorization.</p>

<h3>A Few Introductory Concepts</h3>

<p>Before we can dive into the implementation details, a few things need to be made clear. The first important detail is that the following capabilities are separate and distinct jBPM &amp; Red Hat BPM Suite.</p>

<ul>
<li>Authentication and authorization to access the REST API.<a href="http://www.schabell.org/2015/11/jboss-bpmsuite-restapi-auth-client-apps.html">Learn more</a>.</li>
<li>User, groups and roles in support of human task management. See below for more details.</li>
</ul>

<p>Secondly, we need to understand that out of the box, the KIE Server is configured to use <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/jaas/JAASRefGuide.html">JAAS</a> for security. Long story short, the JAAS programming model makes it difficult for implementations to separate the above two concepts. Thus in a default installation of the KIE-Server, the user that is used to authenticate against the server for the REST API will <strong>also</strong> be used as the user to query the human task engine, even if you use the <code>user</code> query parameter in the <a href="https://access.redhat.com/documentation/en-US/Red_Hat_JBoss_BPM_Suite/6.2/html/User_Guide/realtime_decision_server.html#user_tasks">Human Task REST API</a>.</p>

<p>Since most custom UI implementations will choose to use a service account to handle authentication/authorization against the REST API and then pass in a user who is logged into the custom front-end, we&#39;ll need to do some customization because JAAS just won&#39;t cut it.</p>

<h3>Configuring KIE Server For More Flexible Authentication &amp; Authorization</h3>

<p>There are the <a href="https://access.redhat.com/documentation/en-US/Red_Hat_JBoss_BPM_Suite/6.2/html/User_Guide/Realtime_Decision_Server_Setup.html#Bootstrap_switches">system properties</a> that we&#39;ll need to configure in order to get the desired behavior:</p>

<ul>
<li><code>org.kie.server.bypass.auth.user = false</code> to bypass JAAS when querying the human task engine</li>
<li><code>org.jbpm.ht.callback = ldap|db|mvel|props|jaas|custom</code> to set an alternate method for retrieving user/group/role information.</li>
<li><code>org.jbpm.ht.custom.callback = your.custom.class</code> to write your own <code>UserGroupCallback</code>. <a href="https://access.redhat.com/solutions/1149763">Learn more</a> on the Red Hat Customer Portal.</li>
<li><code>org.jbpm.ht.userinfo = ldap|db|props|custom</code> to get the actual user data</li>
<li><code>org.jbpm.ht.custom.userinfo = your.custom.class</code> to write your own <code>UserInfo</code> class</li>
</ul>

<p>To understand how the code actually uses these properties, the <a href="https://github.com/droolsjbpm/jbpm/blob/6.3.x/jbpm-runtime-manager/src/main/java/org/jbpm/runtime/manager/impl/identity/UserDataServiceProvider.java">UserServiceDataProvider</a> is quite useful. The <a href="https://docs.jboss.org/jbpm/v6.3/userguide/ch20.html#d0e23994">community docs</a> also provide more color on this subject, and if you are using LDAP, you might want to look at <a href="https://docs.jboss.org/jbpm/v6.3/userguide/ch20.html#d0e23994">this blog</a> as well.</p>

<h3>Using KIE Workbench / Business Central</h3>

<p>This is a different can of worms, so you&#39;ll want to check out the <a href="https://access.redhat.com/solutions/1149763">Red Hat solution article on the subject</a>.</p>

<h3>Credits</h3>

<p>Thanks to <a href="https://www.linkedin.com/in/justingoldsmith">Justin Goldsmith helping</a> me dig into the subject.</p>

	  ]]></description>
	</item>


</channel>
</rss>
